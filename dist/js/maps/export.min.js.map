{"version":3,"names":[],"mappings":"","sources":["export.js"],"sourcesContent":["'use strict'\n\nconst i18n\t\t\t= require( './i18n.min' )\n\nconst { remote } \t= require('electron')\nconst path \t\t\t= require('path')\nconst dialog\t\t= remote.dialog\nconst fs \t\t\t= require( 'fs-extra' )\nconst log \t\t\t= require( 'electron-log' )\nconst Store \t\t= require( 'electron-store' )\nconst store\t\t\t= new Store()\nconst bookmarks\t\t= new Store( {name: 'bookmarks'} )\n\n\n\nmodule.exports.exportBookmarks = function( filePath ) {\n\t\n\tdialog.showSaveDialog(remote.getCurrentWindow(), {\n\t\t\t\n\t\tdefaultPath: filePath,\n\t\tbuttonLabel: i18n.t('export:savedialog.button', 'Export Bookmarks'),\n\t\tproperties: [\t'openDirectory',\n\t\t\t\t\t\t'createDirectory'\n\t\t\t\t\t],\n\t\tfilters: [\n\t\t\t\t\t{\tname:\t\t'html',\n\t\t\t\t\t\textensions:\t['html']\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t}\n\t).then((data) =>{\n\t\t\n\t\tif( data.canceled === false ) {\n\t\t\t\n\t\t\tstore.set( 'exportPath', data.filePath )\n\t\t\texportAllBookmarks( data.filePath )\n\t\t}\n\t})\n}\n\n\n\nfunction exportAllBookmarks( exportPath ) {\n\t\n\tlet expname \t\t= path.basename( exportPath ),\n\t\texppath \t\t= path.dirname( exportPath ),\n\t\tbookmarkdata \t= bookmarks.get( 'data' )\n\t\n\tlet output =\n`<!DOCTYPE NETSCAPE-Bookmark-file-1>\n<META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=UTF-8\">\n<TITLE>Bookmarks</TITLE>\n<H1>Bookmarks</H1>\n<DL><p>`\n\t\n\t\n\tfor ( let item of bookmarkdata ) {\n\t\t\n\t\tlet tagList = item.tags.toString()\n\t\t\t\n\t\toutput +=\n`\n<DT><A HREF=\"${item.url}\" TAGS=\"${tagList}\">${item.title}</A>`\n\t\t\n\t\tif( item.description ) {\n\t\t\t\n\t\t\toutput += `<DD>${item.description}`\n\t\t}\n\t}\n\t\n\tfs.outputFile( exportPath, output )\n\n\t.then( () => fs.readFile( exportPath, 'utf8')\n\t\n\t).then(data => {\n\t\t\n\t\tlet exportNotification = new Notification('Nextcloud Bookmark Manager', {\n\t\t\t\n\t\t\tbody: i18n.t('export:notification.body', 'the file: {{name}}\\nhas been saved to: {{- path}}', {name: expname, path: exppath})\n\t\t})\n\t\n\t}).catch(error => {\n\t\t\n\t\tlog.error( error )\n\t\t\n\t\tdialog.showErrorBox(\n\t\t\ti18n.t('export:errorbox.title', 'Export Error'),\n\t\t\ti18n.t('export:errorbox.content', 'An error occured exporting:\\n{{- filepath}}', {filepath: exportPath})\n\t\t)\n\t})\n}\n"],"file":"../export.min.js"}