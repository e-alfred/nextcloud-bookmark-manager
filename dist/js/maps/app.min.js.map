{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["'use strict'\n\nconst i18n = require( './i18n.min' )\n\nconst { ipcRenderer, shell, remote } = require( 'electron' )\nconst Store\t\t\t= require( 'electron-store' )\nconst store\t\t\t= new Store()\nconst dialog\t\t= remote.dialog\nconst $\t\t\t\t= require( 'jquery' )\nconst generate\t\t= require( 'string-to-color' )\nconst log\t\t\t= require( 'electron-log' )\n\nconst fetch\t\t\t= require( './fetch.min' )\nconst maintable\t\t= require( './bookmark-table.min' )\nconst dates\t\t\t= require( './dates.min' )\nconst modalWindow\t= require( './modal.min' )\nconst exp \t\t\t= require( './export.min' )\nconst entities \t\t= require( './entities.min' )\n\nconst jqueryI18next = require( 'jquery-i18next' )\njqueryI18next.init(i18n, $)\n\nlet server \t\t= store.get( 'loginCredentials.server' ),\n\tusername \t= store.get( 'loginCredentials.username' ),\n\tpassword \t= store.get( 'loginCredentials.password' ),\n\tfirstLoad \t= true,\n\tmodal,\n\ttotal\n\n//xxx(dgmid): test\nlet bookmarkFile = new Store({\n\tname: 'bookmarks',\n\tdefaults: {\n\t\tdata: null\n\t}\n})\n\n\n\n//note(dgmid): log exceptions\n\nwindow.onerror = function( error, url, line ) {\n\t\n\tipcRenderer.send( 'error-in-render', {error, url, line} )\n}\n\n\n\n//note(dgmid): populate dataTable\n\nfunction parseBookmarks( array ) {\n\t\n\ttotal = array.length\n\t\n\tlet allTags = [],\n\t\tnoTag\n\t\n\tfor ( let item of array ) {\n\t\t\n\t\tlet taglist = ''\n\t\t\n\t\tnoTag = i18n.t('app:sidebar.filter.untagged', 'un-tagged')\n\t\t\n\t\t\n\t\tif( item.tags.length < 1 ) { item.tags.push( noTag ) }\n\t\t\n\t\tfor ( let tagitem of item.tags ) {\n\t\t\n\t\t\tlet color,\n\t\t\t\tuntagged\n\t\t\t\n\t\t\tif( tagitem === noTag ) {\n\t\t\t\t\n\t\t\t\tcolor\t\t = ''\n\t\t\t\tuntagged\t = ' untagged'\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcolor\t\t = generate(tagitem)\n\t\t\t\tuntagged\t = ''\n\t\t\t}\n\t\t\t\n\t\t\ttaglist += `<span class=\"tag${untagged}\" title=\"${entities.encode(tagitem)}\" style=\"background-color: ${color};\">${entities.encode(tagitem)}</span> <span class=\"tagname\">${entities.encode(tagitem)}</span>`\n\t\t\t\n\t\t\tallTags.push( tagitem )\n\t\t}\n\t\t\t\n\t\tlet created = \titem.added,\n\t\t\tmodified = \titem.lastmodified\n\t\t\n\t\tmaintable.bookmarkTable.row.add( [\n\t\t\t\n\t\t\titem.id,\n\t\t\t' ',\n\t\t\thtmlEntities( item.title ),\n\t\t\thtmlEntities( item.description ),\n\t\t\titem.url,\n\t\t\tcreated,\n\t\t\tdates.columnDate( created ),\n\t\t\tmodified,\n\t\t\tdates.columnDate( modified ),\n\t\t\ttaglist\n\t\t\n\t\t]).draw( false )\n\t}\n\t\n\tbuildTagList( allTags.sort(), noTag )\n\t\n\tif( firstLoad === true ) {\n\t\t\n\t\tsetColControls()\t\n\t\t\n\t\tconst check = require( './version.min' )\n\t\tfirstLoad = false\n\t\tcheck.appVersion()\n\t}\n}\n\n\n\n//note(dgmid): get list of tags with count\n\nfunction buildTagList( array, noTag ) {\n\t\n\t//clear the taglists first\n\t$('.taglist').html( '' )\n\t\n\tlet compressed = [],\n\tcopy = array.slice(0)\n\t\n\tfor (var i = 0; i < array.length; i++) {\n\t\n\t\tvar myCount = 0\n\t\t\n\t\tfor (var w = 0; w < copy.length; w++) {\n\t\t\t\n\t\t\tif (array[i] == copy[w]) {\n\t\t\t\t\n\t\t\t\tmyCount++\n\t\t\t\tdelete copy[w]\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (myCount > 0) {\n\t\t\t\n\t\t\tvar a = new Object()\n\t\t\ta.value = array[i]\n\t\t\ta.count = myCount\n\t\t\tcompressed.push(a)\n\t\t}\n\t}\n\t\n\t\n\tlet results = [],\n\tuntagged = '',\n\tcount = 1\n\t\n\tfor ( let tagitem of compressed ) {\n\t\t\n\t\tif( tagitem.value === noTag ) {\n\t\t\t\n\t\t\tuntagged =\n\t\t\t\n\t\t\t`<dd class=\"margin-top\">\n\t\t\t\t<a href=\"#\" class=\"filter\" data-filter=\"${escape(tagitem.value)}\">\n\t\t\t\t\t<span class=\"filter-icon icon-untagged\"></span>\n\t\t\t\t\t<span class=\"filter-name\">${entities.encode(tagitem.value)}</span>\n\t\t\t\t\t<span class=\"filter-count\">${tagitem.count}</span>\n\t\t\t\t</a>\n\t\t\t</dd>`\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\tvar color = generate(tagitem.value)\n\t\t\t\n\t\t\t$('#taglist').append(\n\t\t\t\n\t\t\t`<dd>\n\t\t\t\t<a href=\"#\" class=\"filter\" data-id=\"${count}\" data-filter=\"${entities.encode(tagitem.value)}\"><span class=\"tag\" title=\"${entities.encode(tagitem.value)}\" style=\"background-color: ${color};\">${entities.encode(tagitem.value)}</span> <span class=\"filter-name\">${entities.encode(tagitem.value)}</span>\n\t\t\t\t<span class=\"filter-count\">${tagitem.count}</span></a>\n\t\t\t</dd>`\n\t\t\t)\n\t\t\t\n\t\t\tresults.push( { \"id\": count , \"text\": tagitem.value } )\n\t\t\tcount++\n\t\t}\n\t}\n\t\n\t\n\tstore.set('tags', results )\n\t\n\t\n\t$('#taglist-extras').append( `${untagged}` )\n\t$('#filter-all').append(\n\t\t `<dd>\n\t\t\t<a href=\"#\" class=\"filter selected\" data-filter=\"\">\n\t\t\t\t<span class=\"filter-icon icon-home\"></span>\n\t\t\t\t<span class=\"filter-name\">${i18n.t('app:sidebar.filter.all','All Bookmarks')}</span>\n\t\t\t\t<span class=\"filter-count\">${total}</span>\n\t\t\t</a>\n\t\t</dd>` )\n\t\n\t$('#sidebar').fadeIn( 400 )\n\tloader( 'remove' )\n}\n\n\n\n//note(dgmid): add bookmark\n\nipcRenderer.on('add-bookmark', (event, message) => {\n\t\n\tmodalWindow.openModal( 'file://' + __dirname + '/../html/add-bookmark.html', 480, 340, true )\t\n})\n\n\n//note(dgmid): delete bookmark\n\nipcRenderer.on('delete-bookmark', (event, message) => {\n\t\n\tlet bookmark = false\n\t\n\tif( message == 'delete-bookmark' ) {\n\t\t\n\t\tlet row = maintable.bookmarkTable.row('.selected').data()\n\t\tbookmark = [row[0], entities.decode(row[2])]\n\t\n\t} else {\n\t\n\t\tbookmark = message\n\t}\n\t\n\tdeleteBookmark( bookmark )\n})\n\n\n\n//note(dgmid): delete bookmarks from info panel\n\n$('body').on('click', '.info-delete', function(e) {\n\t\n\tlet id = $( this ).data( 'id' )\n\t\n\tfetch.bookmarksApi( 'single', id, '', function( message ) {\n\t\t\n\t\tlet obj \t\t= JSON.parse( message ),\n\t\t\tbookmark \t= []\n\t\t\n\t\tbookmark.push( obj['item']['id'] )\n\t\tbookmark.push( obj['item']['title'] )\n\t\t\n\t\tdeleteBookmark( bookmark )\n\t})\n})\n\n\n\n//note(dgmid): delete bookmark\n\nfunction deleteBookmark( bookmark ) {\n\t\n\tif( bookmark ) {\n\t\t\n\t\tlet response = dialog.showMessageBoxSync(remote.getCurrentWindow(), {\t\n\t\t\t\t\t\t\t\tmessage: i18n.t('app:dialog.message.deletebookmark', 'Are you sure you want to delete the bookmark {{- bookmark}}?', {bookmark: bookmark[1]}),\n\t\t\t\t\t\t\t\tdetail: i18n.t('app:dialog.detail.deletebookmark', 'This operation is not reversable.'),\n\t\t\t\t\t\t\t\tbuttons: [i18n.t('app:dialog.button.deletebookmark', 'Delete Bookmark'), i18n.t('app:dialog.button.cancel', 'Cancel')]\n\t\t\t\t\t\t\t})\n\t\t\t\n\t\tif( response === 0 ) {\n\t\t\t\n\t\t\tfetch.bookmarksApi('delete', bookmark[0], '', function() {\n\t\t\t\t\n\t\t\t\tmaintable.bookmarkTable.clear().draw()\n\t\t\t\tloader( 'add' )\n\t\t\t\t\n\t\t\t\tfetch.bookmarksApi('all', '', '', function( array ){\n\t\t\t\t\t\n\t\t\t\t\tparseBookmarks( array )\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t\n\t} else {\n\t\n\t\tdialog.showErrorBox(\n\t\t\ti18n.t('app:errorbox.title.deletebookmark', 'Delete Bookmark Error'),\n\t\t\ti18n.t('app:errorbox.content.deletebookmark', 'A bookmark must be selected in order to delete it')\n\t\t)\n\t}\n}\n\n\n\n//note(dgmid): edit bookmark\n\nipcRenderer.on('edit-bookmark', (event, message) => {\n\t\n\tlet bookmark = false\n\t\n\tif( message == 'edit-bookmark' ) {\n\t\t\n\t\tbookmark = maintable.bookmarkTable.row('.selected').data()\n\t\t\n\t} else {\n\t\t\n\t\tbookmark = message\n\t}\n\t\n\t\n\tif( bookmark ) {\n\t\t\n\t\tmodalWindow.openModal( 'file://' + __dirname + '/../html/edit-bookmark.html?id=' + bookmark[0], 480, 340, true )\n\t\t\n\t} else {\n\t\t\n\t\tdialog.showErrorBox(\n\t\t\ti18n.t('app:errorbox.title.editbookmark', 'Edit Bookmark Error'),\n\t\t\ti18n.t('app:errorbox.content.editbookmark', 'A bookmark must be selected in order to edit it')\n\t\t)\n\t}\n})\n\n\n\n//note(dgmid): edit bookmarks from info panel\n\n$('body').on('click', '.info-edit', function(e) {\n\t\n\tlet id = $( this ).data( 'id' )\n\tlog.info(`CLICK - ID: ${id}`)\n\t\n\tmodalWindow.openModal( 'file://' + __dirname + '/../html/edit-bookmark.html?id=' + id, 480, 340, true )\n})\n\n\n\n//note(dgmid): edit tag\n\nipcRenderer.on('edit-tag', (event, message) => {\n\t\n\tmodalWindow.openModal( 'file://' + __dirname + '/../html/edit-tag.html?tag=' + message, 480, 180, false )\n})\n\n\n\n//note(dgmid): delete tag\n\nipcRenderer.on('delete-tag', (event, message) => {\n\t\n\tlet tags \t= store.get( 'tags' ),\n\t\ttag \t= tags.find(x => x.id === message).text\n\t\n\tlet response = dialog.showMessageBoxSync(remote.getCurrentWindow(), {\n\t\t\t\t\t\t\t\tmessage: i18n.t('app:dialog.message.deletetag', 'Are you sure you want to delete the tag {{- tag}}?', {tag: tag}),\n\t\t\t\t\t\t\t\tdetail: i18n.t('app:dialog.detail.deletetag', 'This operation is not reversable.'),\n\t\t\t\t\t\t\t\tbuttons: [i18n.t('app:dialog.button.deletetag', 'Delete Tag'), i18n.t('app:dialog.button.cancel', 'Cancel')]\n\t\t\t\t\t\t\t})\n\t\n\tif( response === 0 ) {\n\t\t\n\t\tfetch.bookmarksApi( 'deletetag', '', encodeURIComponent(tag), function() {\n\t\t\t\n\t\t\tmaintable.bookmarkTable.clear().draw()\n\t\t\tloader( 'add' )\n\t\t\t\n\t\t\tfetch.bookmarksApi( 'all', '', '', function( array ) {\n\t\t\t\t\n\t\t\t\tparseBookmarks( array )\n\t\t\t})\n\t\t})\n\t}\n})\n\n\n\n//note(dgmid): get info from context menu\n\nipcRenderer.on('info-bookmark', (event, message) => {\n\t\n\ttoggleInfoPanel( $(`#row_${message}`) )\n})\n\n\n\n//note(dgmid): toggle info\n\nfunction toggleInfoPanel( tr ) {\n\t\n\tlet row = maintable.bookmarkTable.row( tr )\n\t\n\tif ( row.child.isShown() ) {\n\t\t\n\t\trow.child.hide()\n\t\ttr.removeClass('shown')\n\t\n\t} else {\n\t\t\n\t\trow.child( maintable.detailsTable(row.data()) ).show()\n\t\ttr.addClass('shown')\n\t}\n} \n\n\n\n//note(dgmid): columns menu\n\nipcRenderer.on('toggle-column', (event, message) => {\n\t\n\tlet column \t= maintable.bookmarkTable.column( message.id ),\n\t\tstate \t= (message.state == false) ? true : false\n\t\t\n\tcolumn.visible( state )\n\t$(`#${message.name}`).prop('checked', state)\n\tstore.set( `tableColumns.${message.name}`, state )\n})\n\n\n//note(dgmid): log in modal\n\nipcRenderer.on('open-login', (event, message) => {\n\t\n\tmodalWindow.openModal( 'file://' + __dirname + '/../html/login.html', 480, 180, false )\n})\n\n\n\n//note(dgmid): refresh bookmarks\n\nipcRenderer.on('refresh-bookmarks', (event, message) => {\n\t\n\tlet server \t\t= store.get( 'loginCredentials.server' ),\n\t\tusername \t= store.get( 'loginCredentials.username' ),\n\t\tpassword \t= store.get( 'loginCredentials.password' )\n\t\n\tmaintable.bookmarkTable.clear().draw()\n\t\n\tif( server && username && password ) {\n\t\t\n\t\tif( !$('#loader').length ) {\n\t\t\t\n\t\t\tloader( 'add' )\n\t\t\t\n\t\t\tfetch.bookmarksApi( 'all', '', '', function( array ) {\n\t\t\t\t\n\t\t\t\tparseBookmarks( array )\n\t\t\t})\n\t\t}\n\t}\n})\n\n\n\n//note(dgmid): export all bookmarks\n\nipcRenderer.on('export-bookmarks', (event, message) => {\n\t\n\tlet exportPath\t= store.get('exportPath')\n\texp.exportBookmarks( exportPath )\n})\n\n\n//note(dgmid): close login modal\n\nipcRenderer.on('login-ok', (event, message) => {\n\t\n\tmodalWindow.closeModal()\n\tloader( 'add' )\n\t\n\tfetch.bookmarksApi( 'all', '', '', function( array ) {\n\t\t\n\t\tparseBookmarks( array )\n\t})\n})\n\n\n\n//note(dgmid): search\n\nipcRenderer.on('find', (event, message) => {\n\t\n\t$('#search').focus()\n})\n\n\n\n//note(dgmid): set column checkboxes\n\nfunction setColControls() {\n\t\n\tlet cols = store.get('tableColumns')\n\t\n\tfor (let col in cols) {\n\t\t\n\t\t$(`#${col}`).prop('checked', cols[col])\n\t\t\n\t}\n}\n\n\n\n//note(dgmid): htmlentities\n\nfunction htmlEntities( str ) {\n\t\n\treturn \tString(str)\n\t\t\t.replace(/</g, '&lt;')\n\t\t\t.replace(/>/g, '&gt;')\n}\n\n\n\n//note(dgmid): open info panel link in default browser\n\t\n$('body').on('click', '.details-panel a', function(event) {\n\t\n\tevent.preventDefault()\n\t\n\tlet link = $(this).attr( 'href' )\n\tshell.openExternal(link)\n})\n\n\n\n//note(dgmid): open update link in default browser\n\n$('body').on('click', '#update', (event) => {\n\t\n\tevent.preventDefault()\n\t\n\tlet link = $('#update').attr( 'data-url' )\n\t\n\tshell.openExternal(link)\n})\n\n\n\n//note(dgmid): search\n\n$('#search').bind( 'keyup', function() {\n\t\n\tlet str = $(this).val(),\n\t\tstate = ( str.length > 0 ) ? $('#clear').show() : $('#clear').hide()\n})\n\n\n$('#clear').click(function() {\n\t\n\tlet data = $('.taglist .filter.selected').data('filter')\n\t\n\t$(this).hide()\n\t$('#search').val('')\n\tmaintable.bookmarkTable.search( '' ).columns(9).search( data ).draw()\n})\n\n\nwindow.onkeydown = function(e) {\n  if (e.keyCode == 32 && e.target == document.body) {\n    e.preventDefault()\n  }\n};\n\n\n\n//note(dgmid): loader\n\nfunction loader( string  ) {\n\t\n\tif( string === 'add'  ) {\n\t\t\n\t\t$('main #loader').remove()\n\t\t$('main').append('<div id=\"loader\"></div>')\n\t\n\t} else {\n\t\t\n\t\t$('#loader').fadeOut(400, function() { $(this).remove() } )\n\t}\n}\n\n\n\n$(document).ready(function() {\n\t\n\t//note(dgmid): set lang\n\t\n\t$('html').attr('lang', i18n.language)\n\t\n\t//note(dgmid): translate html strings\n\t\n\t$('#sidebar-tags .list-title').html( i18n.t('app:sidebar.title.tags', 'Tags') )\n\t$('#column-list dt').html( i18n.t('app:sidebar.title.columns', 'Columns') )\n\t$('#description span').html( i18n.t('app:sidebar.filter.description', 'Description') )\n\t$('#column-list label span').localize()\n\t$('#add-bookmark span').html( i18n.t('app:button.new', 'Add New Bookmark') )\n\t$('#search').attr('placeholder', i18n.t('app:sidebar.search', 'Search'))\n\t\n\t//note(dgmid): click tag list item to filter table\n\t\n\t$('.taglist').on('click', '.filter', function() {\n\t\t\n\t\t$('#toggle-info-panel').removeClass('opened')\n\t\t$('.filter').removeClass('selected')\n\t\t$(this).addClass('selected')\n\t\t\n\t\tlet data = $(this).data('filter')\n\t\tmaintable.bookmarkTable.columns(9).search(data).draw()\n\t})\n\t\n\t\n\t$('#taglist').on('mousedown', '.filter', function(e) {\n\t\t\n\t\tif(e.which == 3) {\n\t\t\t\n\t\t\tlet id \t\t= $(this).data('id'),\n\t\t\t\tdata \t= $(this).data('filter')\n\t\t\t\n\t\t\tipcRenderer.send('show-tags-menu', [id, data] )\n\t\t}\n\t})\n\t\n\t\n\t//note(dgmid): toggle col visibility\n\t\n\t$('.col-toggle').on( 'click', function () {\n\t\t\n\t\tlet column \t= maintable.bookmarkTable.column( $(this).attr('data-column') ),\n\t\t\tid \t\t= $(this).prop( 'id' )\n\t\t\n\t\t$('#toggle-info-panel').removeClass( 'opened' )\n\t\t\n\t\tmaintable.bookmarkTable.rows().every(function() {\n\t\t\t\n\t\t\tthis.child.hide()\n\t\t\t$(this.node()).removeClass('shown')\n\t\t})\n\t\t\n\t\tif( $(this).prop('checked') === true ) {\n\t\t\t\n\t\t\tcolumn.visible( true )\n\t\t\tstore.set( `tableColumns.${id}`, true )\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\tcolumn.visible( false )\n\t\t\tstore.set( `tableColumns.${id}`, false )\n\t\t}\n\t})\n\t\n\t\n\t//note(dgmid): add bookmark\n\t\n\t$( '#add-bookmark' ).click( function() {\n\t\t\n\t\tmodalWindow.openModal( 'file://' + __dirname + '/../html/add-bookmark.html', 480, 340, true )\n\t})\n\t\n\t\n\t//note(dgmid): show bookmark context menu\n\t\n\t$('body #bookmarks tbody').on('mouseup', 'tr', function(event) {\n\t\t\n\t\tif( event.which === 3 ) {\n\t\t\t\n\t\t\tlet data = maintable.bookmarkTable.row( this ).data()\n\t\t\t\n\t\t\tif( data ) {\n\t\t\t\n\t\t\t\tipcRenderer.send('show-bookmark-menu', data )\n\t\t\t}\n\t\t}\n\t})\n\t\n\t\n\t//note(dgmid): show columns context menu\n\t\n\t$('body thead').on('mouseup', 'th:not(.details-control)', function(event) {\n\t\t\n\t\tif( event.which === 3 ) {\n\t\t\t\n\t\t\tipcRenderer.send('show-columns-menu', '' )\n\t\t}\n\t})\n\t\n\t\n\t//note(dgmid): highlight row\n\t\n\t$('#bookmarks').on('key-focus.dt', function(e, datatable, cell) {\n\t\n\t\t$(maintable.bookmarkTable.row(cell.index().row).node()).addClass('selected')\n\t})\n\t\n\t\n\t//note(dgmid): remove hilight\n\t\n\t$('#bookmarks').on('key-blur.dt', function(e, datatable, cell) {\n\t\n\t\t$(maintable.bookmarkTable.row(cell.index().row).node()).removeClass('selected')\n\t})\n\t\n\t\n\t//note(dgmid): open url on keepress\n\t\n\t$('#bookmarks').on('key.dt', function(e, datatable, key, cell, originalEvent) {\n\t\t\n\t\t// spacebar\n\t\tif( key === 32 ) {\n\t\t\t\n\t\t\tif( !$('#add-bookmark, .col-toggle').is(\":focus\") ) {\n\t\t\t\t\n\t\t\t\tlet data = maintable.bookmarkTable.row(cell.index().row).data()\n\t\t\t\tshell.openExternal(data[4])\n\t\t\t}\n\t\t}\n\t})\n\t\n\t\n\t$('#bookmarks tbody').on('click', 'td.details-control', function () {\n\t\t\n\t\tlet tr = $(this).closest('tr')\n\t\t\n\t\ttoggleInfoPanel( tr )\n\t})\n\t\n\t\n\t//note(dgmid): open url on double-click\n\t\n\t$('#bookmarks tbody').on('dblclick', 'tr td:not(.details-control):not([colspan])', function() {\n\t\t\n\t\tlet tr = $(this).closest('tr')\n\t\t\n\t\tlet data = maintable.bookmarkTable.row(tr).data()\n\t\tshell.openExternal(data[4])\n\t})\n\t\n\t\n\t//note(dgmid): search field\n\t\n\t$('#search').keyup(function(){\n\n\t\tmaintable.bookmarkTable.search($(this).val()).draw()\n\t})\n\t\n\t\n\t//note(dgmid): toggle info panels\n\t\n\t$('#toggle-info-panel').click( function() {\n\t\t\n\t\tlet toggle = $(this)\n\t\ttoggle.toggleClass( 'opened' )\n\t\t\n\t\tmaintable.bookmarkTable.rows( { filter : 'applied'} ).every(function() {\n\t\t\t\n\t\t\tif( toggle.hasClass( 'opened' ) ) {\n\t\t\t\t\n\t\t\t\tif(!this.child.isShown()){\n\t\t\t\t\t\n\t\t\t\t\tthis.child( maintable.detailsTable(this.data()) ).show()\n\t\t\t\t\t$(this.node()).addClass('shown')\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\n\t\t\t\tif(this.child.isShown()){\n\t\t\t\t\t\n\t\t\t\t\tthis.child.hide()\n\t\t\t\t\t$(this.node()).removeClass('shown')\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t})\n\t\n\t//note(dgmid): if missing credentials, open login window, else load bookmarks\n\t\n\tif( !server || !username || !password ) {\n\t\t\n\t\tmodalWindow.openModal( 'file://' + __dirname + '/../html/login.html', 480, 180, false )\n\t\n\t} else {\n\t\t\n\t\tloader( 'add' )\n\t\tfetch.bookmarksApi( 'all', '', '', function( array ) {\n\t\t\t\n\t\t\tparseBookmarks( array )\n\t\t})\n\t}\n})\n"],"file":"../app.min.js"}