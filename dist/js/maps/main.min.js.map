{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["'use strict'\n\nconst {app, BrowserWindow, ipcMain, protocol, Menu} = require('electron')\nconst url \t\t= require('url') \nconst path \t\t= require('path')\nconst dialog \t= require('electron').dialog\nconst Store \t= require('electron-store')\nconst log\t\t= require( 'electron-log' )\n\nconst getAvailableBrowsers = require('detect-installed-browsers').getAvailableBrowsers\n\n\n\nlet win,\n\tloginFlow,\n\tisQuitting = false\n\n\nlet store = new Store({\n\tname: 'config',\n\tdefaults: {\n\t\t\n\t\twindowBounds: {\n\t\t\twidth: 1000,\n\t\t\theight: 700,\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\t\n\t\ttableColumns: {\n\t\t\t\n\t\t\tcreated: true,\n\t\t\tmodified: true,\n\t\t\ttags: true\n\t\t},\n\t\t\n\t\tloginCredentials: {\n\t\t\t\n\t\t\tserver: '',\n\t\t\tusername: '',\n\t\t\tpassword: ''\n\t\t},\n\t\t\n\t\texportPath: app.getPath('desktop'),\n\t\ttags: null,\n\t\tbrowsers: null\n\t}\n})\n\n\n\nfunction createWindow() {\n\t\n\tlet { x, y, width, height } = store.get('windowBounds')\n\t\n\twin = new BrowserWindow({\n\t\tshow: false,\n\t\tx: x,\n\t\ty: y,\n\t\twidth: width,\n\t\theight: height,\n\t\tminWidth: 550,\n\t\tminHeight: 396,\n\t\tvibrancy: 'under-window',\n\t\twebPreferences: {\n\t\t\tdevTools: false,\n\t\t\tpreload: path.join(__dirname, './preload.min.js'),\n\t\t\tnodeIntegration: true,\n\t\t},\n\t\ticon: path.join(__dirname, '../assets/icon/Icon.icns')\n\t})\n\t\n\tfunction saveWindowBounds() {\n\t\t\n\t\tstore.set('windowBounds', win.getBounds())\n\t}\n\t\n\twin.loadURL(url.format ({\n\t\t\n\t\tpathname: path.join(__dirname, '../html/app.html'), \n\t\tprotocol: 'file:',\n\t\tslashes: true \n\t}))\n\t\n\twin.once('ready-to-show', () => {\n\t\t\n\t\twin.show()\n\t})\n\t\n\twin.on('resize', saveWindowBounds)\n\twin.on('move', saveWindowBounds)\n\t\n\tapp.on('before-quit', () => {\n\t\t\n\t\tisQuitting = true\n\t})\n\t\n\twin.on('close', function(e) {\n\t\n\t\tif( !isQuitting ) {\n\t\t\t\n\t\t\te.preventDefault()\n\t\t\tMenu.sendActionToFirstResponder('hide:')\n\t\t}\n\t})\n\t\n\twin.webContents.on('did-fail-load', () => {\n\t\t\n\t\tlog.error( `main window did not load` )\n\t})\n\t\n\twin.webContents.on( 'crashed', ( event, killed ) => {\n\t\t\n\t\tlog.info( `main window has crashed:` )\n\t\tlog.error( event )\n\t})\n\t\n\twin.on( 'unresponsive', () => {\n\t\t\n\t\tlog.info( `main window is not responding…` )\n\t})\n\t\n\twin.on( 'responsive', () => {\n\t\t\n\t\tlog.info( `main window is responding` )\n\t})\n\t\n\tgetAvailableBrowsers( {}, ( browserList ) => {\n\t\t\n\t\tlet results = []\n\t\t\n\t\tfor ( let browser of browserList ) {\n\t\t\t\n\t\t\tresults.push( { \"name\": browser.name } )\n\t\t\tstore.set('browsers', results )\n\t\t}\n\t})\n\t\n\trequire( './menu-app.min' )\n\trequire( './menu-bookmarks.min' )\n\trequire( './menu-columns.min' )\n\trequire( './menu-tags.min' )\n}\n\n\n\napp.on('ready', function() {\n\t\n\tcreateWindow()\n\t\n\tprotocol.registerFileProtocol('nc', (request, callack) => {\n\t\t\n\t\tconst url = request.url\n\t\t\n\t\tif( url ) {\n\t\t\t\n\t\t\tconst parts = url.split( '&' )\n\t\t\t\n\t\t\tconst \tuser = parts[1].replace('user:', ''),\n\t\t\t\t\tpass = parts[2].replace('password:', '')\n\t\t\t\n\t\t\tstore.set( 'loginCredentials.username', user )\n\t\t\tstore.set( 'loginCredentials.password', pass )\n\t\t\t\n\t\t\tloginFlow.close()\n\t\t\twin.webContents.send('login-ok', 'login-ok')\n\t\t}\n\t\n\t}, ( error ) => {\n\t\t\n\t\tif (error) {\n\t\t\t\n\t\t\tlog.error('Failed to register protocol')\n\t\t\t\n\t\t\tdialog.showErrorBox(\n\t\t\t\t`Error`,\n\t\t\t\t`Failed to register protocol`\n\t\t\t)\n\t\t}\n\t})\n}) \n\n\n\napp.on('window-all-closed', function () {\n\t\n\tif (process.platform !== 'darwin') {\n\t\t\n\t\tapp.quit()\n\t}\n})\n\n\n\napp.on('activate', ( event, hasVisibleWindows ) => {\n\t\n\tif (!hasVisibleWindows) {\n\t\t\n\t\tcreateWindow()\n\t}\n})\n\n\n\napp.on('quit-app', () => {\n\t\n\tisQuitting = true\n\tapp.quit()\n})\n\n\nipcMain.on('refresh', (event, message) => {\n\t\n\twin.webContents.send('refresh-bookmarks', 'refresh')\n})\n\n\n\nipcMain.on('loginflow', (event, message) => {\n\t\n\tloginFlow = new BrowserWindow({\n\t\t\n\t\twidth: 800,\n\t\theight: 600,\n\t\tresizable: false,\n\t\tminimizable: false,\n\t\tmaximizable: false,\n\t\tshow: false,\n\t\ttitleBarStyle: 'hidden',\n\t\tbackgroundColor: '#0082c9',\n\t\twebPreferences: {\n\t\t\tdevTools: false,\n\t\t\tnodeIntegration: false\n\t\t}\n\t})\n\t\n\tloginFlow.loadURL( message + '/index.php/login/flow' , {\n\t\t\n\t\tuserAgent: 'Nextcloud Bookmark Manager - Macintosh',\n\t\textraHeaders: 'OCS-APIRequest: true'\n\t})\n\t\n\tloginFlow.once('ready-to-show', () => {\n\t\t\n\t\tloginFlow.show()\n\t})\n\t\n\tloginFlow.webContents.on('did-fail-load', () => {\n\t\t\n\t\tlog.error( `loginflow window did not load` )\n\t})\n\t\n\tloginFlow.webContents.on( 'crashed', ( event, killed ) => {\n\t\t\n\t\tlog.info( `loginflow window has crashed:` )\n\t\tlog.error( event )\n\t})\n\t\n\tloginFlow.on( 'unresponsive', () => {\n\t\t\n\t\tlog.info( `loginflow window is not responding…` )\n\t})\n\t\n\tloginFlow.on( 'responsive', () => {\n\t\t\n\t\tlog.info( `loginflow window is responding` )\n\t})\n})\n\n\n\nipcMain.on('error-in-render', function(event, message) {\n\t\n\tlog.error(`exception in render process:`)\n\tlog.info (message)\n})\n"],"file":"../main.min.js"}